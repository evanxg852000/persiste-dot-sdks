#summary This small tutorial will guide you in integrating Persite. platform in your Php application.

= Getting the SDK =

First of all download the PHP sdk from [ here] , unpack the zip file. 

= Integration =

Once the sdk package has been unpacked , drop the sdk folder into your project and include the include the sdk into your php project using this snippet.
{{{
<?php
 include("PATH_TO_SDK_FOLDER/Sdk.php");
}}}
 
That's all for the integration.

== Persiste. API == 

The Persiste. API has three main methods which all return a response of type `LogServiceResponse`. This class has three properties:
 * Status: wich can take one of the following value:
   # error : the call was not sent to the server for reason usually specified in the message property  
   # failure : The call was well went to the server but was performed for reseon that is usually specified in the message property.
   # success : The call was performed correctly.
 * Message: The description or reason of the status 
 * Data : An option data sent from the server usualy the logs you retrieved using get
===The get method (GET)===
The get method allow you to retrieve logs previously saved.  
This method takes a parameter which is the page of logs you intend to retrieve. it defaults to 1 when not specified.

For performance reason on your application, persiste. send only 12 logs per page. 

The following is an example of calling the get method 
{{{
<?php
$response=LogServiceClient::get(1);
var_dump($response);
}}}

===The delete method (DELETE)===
The delete method allow you to delete a log by specifying its id.  
Note that the log you want to delete must belong to the calling application otherwise you will get a failure status.

The following is an example of calling the delete method on a log with id (23) 
{{{
<?php
$response=LogServiceClient::delete(23);
var_dump($response);
}}}

===The put method (PUT)===
The put method is the heart of the api that allow you to save your logs or simply to log information on persiste. platform.
The Sdk is purelly Object orriented but provide an easy interface to reduce the amount of code you write.
Logs are classified into the following four categories:
 * error : for logging fatal error or logs estimated at this level;
 * warn : for logging warnings or logs estimated at this level; 
 * info : for logging information, alerts or logs estimated at this level; 
 * success : for success alerts or logs estimated at this level; 

The sdk provide an interface for each of this type of logs. 
for each of these interface, you are required to provide the title and a description of the log.
You can also specify the developer emitting the log this allow you to spot from whose code the logs are coming from. 
You can also specify the list or custom fields with their  values.
You can even specify a stack trace information.  

The following is an example of sending a log. 
{{{
<?php

//warning log with tile and description
//$response=LogServiceClient::warn("my log", "sample log");

//information log with tile and description
$response=LogServiceClient::info("tell log", "sample log using tell");

//complete fatal error log with custom fields and stack trace
$fields=array('Line'=>'32','Function'=>'load','Memory'=>50);
$response=LogServiceClient::warn("Evan Log", "sample log",'evanxg852000@yahoo.fr',$fields, 'this is the stack trace');

var_dump($response);
}}}